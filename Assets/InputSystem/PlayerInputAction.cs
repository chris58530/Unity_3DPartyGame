//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.1
//     from Assets/InputSystem/PlayerInputAction.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerInputAction : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerInputAction()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerInputAction"",
    ""maps"": [
        {
            ""name"": ""GamePlay1"",
            ""id"": ""fbf3a550-83c6-46e3-bd73-2a9bc3483ad1"",
            ""actions"": [
                {
                    ""name"": ""Axes"",
                    ""type"": ""Value"",
                    ""id"": ""6e1e6a6c-d0d7-44f2-a879-57c1398345eb"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""1fa43041-250d-4b97-a06c-c8f7eaba9a5d"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Magnet"",
                    ""type"": ""Button"",
                    ""id"": ""d994a665-5321-48ea-b810-bae2709803c6"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""WASD"",
                    ""id"": ""faff7f2d-5030-4465-b2d5-6ef2c6a83fcc"",
                    ""path"": ""2DVector(mode=1)"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Axes"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""7824e751-4df7-448e-ac01-2ac2efb3f1a4"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Axes"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""9554c157-6a8a-4141-904f-590de0e2baec"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Axes"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""dbff840a-81b7-471c-b18a-7dc696a97cbc"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Axes"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""fa93742a-4a83-45c0-bff6-b895c52967a0"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Axes"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""4a2ae4bc-e962-4446-a290-47efcc94bbb2"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e1ed0041-28c4-4646-88ff-6a32be26f7c6"",
                    ""path"": ""<Keyboard>/g"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Magnet"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""GamePlay2"",
            ""id"": ""3bd9de9f-97d4-4de3-ad99-a403aef7b143"",
            ""actions"": [
                {
                    ""name"": ""Axes"",
                    ""type"": ""Value"",
                    ""id"": ""cf374132-44c3-489d-91e9-1fac1fd1c3e4"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""8c48ca6e-d67f-4c57-9d45-79601a498aa7"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Magnet"",
                    ""type"": ""Button"",
                    ""id"": ""042b73af-d51a-4cf7-9bc4-136e9bee4857"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""Stick"",
                    ""id"": ""e4c036ae-ee55-46ba-ad61-fd485fc56eae"",
                    ""path"": ""2DVector(mode=1)"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Axes"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""c45f6bb2-b6d1-4730-81d0-592192086242"",
                    ""path"": ""<HID::Nintendo Wireless Gamepad>/hat/up"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Axes"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""up"",
                    ""id"": ""a37f84a5-c0e1-4823-bfe8-2eddb127916e"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Axes"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""6fb45878-6642-4896-b9ea-6d82aaceb805"",
                    ""path"": ""<HID::Nintendo Wireless Gamepad>/hat/down"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Axes"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""ddf61aa2-93df-4ad5-8c26-329a0052c306"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Axes"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""ce4d228a-62bf-4e99-8210-0e61c5c6238a"",
                    ""path"": ""<HID::Nintendo Wireless Gamepad>/hat/left"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Axes"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""ada211e8-6062-4f12-82d3-8d6ee06a1a76"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Axes"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""b275e04d-207b-40e5-b2fc-7489a38d5f5c"",
                    ""path"": ""<HID::Nintendo Wireless Gamepad>/hat/right"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Axes"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""08e50e4d-30ac-4703-ae36-8522cc904cee"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Axes"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""2d7dfc8a-e45b-4231-b765-83b9d423eec7"",
                    ""path"": ""<Joystick>/trigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""8168a459-4e99-4510-b195-37cd23c23470"",
                    ""path"": ""<Keyboard>/rightShift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""512a247b-1997-4b48-818a-9c1c6612abf9"",
                    ""path"": ""<Keyboard>/enter"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Magnet"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // GamePlay1
        m_GamePlay1 = asset.FindActionMap("GamePlay1", throwIfNotFound: true);
        m_GamePlay1_Axes = m_GamePlay1.FindAction("Axes", throwIfNotFound: true);
        m_GamePlay1_Jump = m_GamePlay1.FindAction("Jump", throwIfNotFound: true);
        m_GamePlay1_Magnet = m_GamePlay1.FindAction("Magnet", throwIfNotFound: true);
        // GamePlay2
        m_GamePlay2 = asset.FindActionMap("GamePlay2", throwIfNotFound: true);
        m_GamePlay2_Axes = m_GamePlay2.FindAction("Axes", throwIfNotFound: true);
        m_GamePlay2_Jump = m_GamePlay2.FindAction("Jump", throwIfNotFound: true);
        m_GamePlay2_Magnet = m_GamePlay2.FindAction("Magnet", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // GamePlay1
    private readonly InputActionMap m_GamePlay1;
    private IGamePlay1Actions m_GamePlay1ActionsCallbackInterface;
    private readonly InputAction m_GamePlay1_Axes;
    private readonly InputAction m_GamePlay1_Jump;
    private readonly InputAction m_GamePlay1_Magnet;
    public struct GamePlay1Actions
    {
        private @PlayerInputAction m_Wrapper;
        public GamePlay1Actions(@PlayerInputAction wrapper) { m_Wrapper = wrapper; }
        public InputAction @Axes => m_Wrapper.m_GamePlay1_Axes;
        public InputAction @Jump => m_Wrapper.m_GamePlay1_Jump;
        public InputAction @Magnet => m_Wrapper.m_GamePlay1_Magnet;
        public InputActionMap Get() { return m_Wrapper.m_GamePlay1; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(GamePlay1Actions set) { return set.Get(); }
        public void SetCallbacks(IGamePlay1Actions instance)
        {
            if (m_Wrapper.m_GamePlay1ActionsCallbackInterface != null)
            {
                @Axes.started -= m_Wrapper.m_GamePlay1ActionsCallbackInterface.OnAxes;
                @Axes.performed -= m_Wrapper.m_GamePlay1ActionsCallbackInterface.OnAxes;
                @Axes.canceled -= m_Wrapper.m_GamePlay1ActionsCallbackInterface.OnAxes;
                @Jump.started -= m_Wrapper.m_GamePlay1ActionsCallbackInterface.OnJump;
                @Jump.performed -= m_Wrapper.m_GamePlay1ActionsCallbackInterface.OnJump;
                @Jump.canceled -= m_Wrapper.m_GamePlay1ActionsCallbackInterface.OnJump;
                @Magnet.started -= m_Wrapper.m_GamePlay1ActionsCallbackInterface.OnMagnet;
                @Magnet.performed -= m_Wrapper.m_GamePlay1ActionsCallbackInterface.OnMagnet;
                @Magnet.canceled -= m_Wrapper.m_GamePlay1ActionsCallbackInterface.OnMagnet;
            }
            m_Wrapper.m_GamePlay1ActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Axes.started += instance.OnAxes;
                @Axes.performed += instance.OnAxes;
                @Axes.canceled += instance.OnAxes;
                @Jump.started += instance.OnJump;
                @Jump.performed += instance.OnJump;
                @Jump.canceled += instance.OnJump;
                @Magnet.started += instance.OnMagnet;
                @Magnet.performed += instance.OnMagnet;
                @Magnet.canceled += instance.OnMagnet;
            }
        }
    }
    public GamePlay1Actions @GamePlay1 => new GamePlay1Actions(this);

    // GamePlay2
    private readonly InputActionMap m_GamePlay2;
    private IGamePlay2Actions m_GamePlay2ActionsCallbackInterface;
    private readonly InputAction m_GamePlay2_Axes;
    private readonly InputAction m_GamePlay2_Jump;
    private readonly InputAction m_GamePlay2_Magnet;
    public struct GamePlay2Actions
    {
        private @PlayerInputAction m_Wrapper;
        public GamePlay2Actions(@PlayerInputAction wrapper) { m_Wrapper = wrapper; }
        public InputAction @Axes => m_Wrapper.m_GamePlay2_Axes;
        public InputAction @Jump => m_Wrapper.m_GamePlay2_Jump;
        public InputAction @Magnet => m_Wrapper.m_GamePlay2_Magnet;
        public InputActionMap Get() { return m_Wrapper.m_GamePlay2; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(GamePlay2Actions set) { return set.Get(); }
        public void SetCallbacks(IGamePlay2Actions instance)
        {
            if (m_Wrapper.m_GamePlay2ActionsCallbackInterface != null)
            {
                @Axes.started -= m_Wrapper.m_GamePlay2ActionsCallbackInterface.OnAxes;
                @Axes.performed -= m_Wrapper.m_GamePlay2ActionsCallbackInterface.OnAxes;
                @Axes.canceled -= m_Wrapper.m_GamePlay2ActionsCallbackInterface.OnAxes;
                @Jump.started -= m_Wrapper.m_GamePlay2ActionsCallbackInterface.OnJump;
                @Jump.performed -= m_Wrapper.m_GamePlay2ActionsCallbackInterface.OnJump;
                @Jump.canceled -= m_Wrapper.m_GamePlay2ActionsCallbackInterface.OnJump;
                @Magnet.started -= m_Wrapper.m_GamePlay2ActionsCallbackInterface.OnMagnet;
                @Magnet.performed -= m_Wrapper.m_GamePlay2ActionsCallbackInterface.OnMagnet;
                @Magnet.canceled -= m_Wrapper.m_GamePlay2ActionsCallbackInterface.OnMagnet;
            }
            m_Wrapper.m_GamePlay2ActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Axes.started += instance.OnAxes;
                @Axes.performed += instance.OnAxes;
                @Axes.canceled += instance.OnAxes;
                @Jump.started += instance.OnJump;
                @Jump.performed += instance.OnJump;
                @Jump.canceled += instance.OnJump;
                @Magnet.started += instance.OnMagnet;
                @Magnet.performed += instance.OnMagnet;
                @Magnet.canceled += instance.OnMagnet;
            }
        }
    }
    public GamePlay2Actions @GamePlay2 => new GamePlay2Actions(this);
    public interface IGamePlay1Actions
    {
        void OnAxes(InputAction.CallbackContext context);
        void OnJump(InputAction.CallbackContext context);
        void OnMagnet(InputAction.CallbackContext context);
    }
    public interface IGamePlay2Actions
    {
        void OnAxes(InputAction.CallbackContext context);
        void OnJump(InputAction.CallbackContext context);
        void OnMagnet(InputAction.CallbackContext context);
    }
}
